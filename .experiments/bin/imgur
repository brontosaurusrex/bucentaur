#!/bin/bash

# imgur

# imgur uploader, markdown && bbcode generator

# PNG files over X MB will be converted to JPEGs. https://0x0.st/sGED

# Copyright (C) 2019 brontosaurusrex
# License: GPLv3 or later.

# help
help () { 
cat << EOF

    imgur is imgur.com uploader and transparent thumbnail maker,
    that will also echo out some markdown and bbcode.
    
    Examples:
    
        imgur image.png
    
        # Upload and generate medium and small thumb if image has alpha,
        # else just upload and blurb some embed code
        
        imgur https://i.imgur.com/Gnbk4iD.png
        
        # Temporarily download,
        # generate medium and small thumb if image has alpha,
        # else just blurb some embed code
        
    Notes:
    
        - Deletehash is only generated in certain scenarios (never for thumbnails).
        - Bigger files than this script can support, can be uploaded
        via imgur web interface.
        - Currently imgur upload limit seems to be 50 files/hour/id.
        
    Config:
    
        Get your imgur id, see https://apidocs.imgur.com/?version=latest
        and drop it in 
        $HOME/.config/imgur/id
    
EOF
}
if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ $# -eq 0 ]; then
    help && exit
fi

# imgurl id

# Read id from config
idfile="$HOME/.config/imgur/id" 
if [ -f "$idfile" ]; then
    while read -r line ; do 
        id="$line"
    done < "$idfile" 
fi
[ -z "$id" ] && id="" # or enter directly
[ -z "$id" ] && { echo "Provide imgur id, https://apidocs.imgur.com/?version=latest" ; exit 1; }

# required
command -v jq >/dev/null 2>&1 || { >&2 echo "I need jq" ; exit 1; }
command -v curl >/dev/null 2>&1 || { >&2 echo "I need curl" ; exit 1; }
command -v identify >/dev/null 2>&1 || { >&2 echo "I need im identify" ; exit 1; }
command -v convert >/dev/null 2>&1 || { >&2 echo "I need im convert" ; exit 1; }

# tmpdir
tmp="/tmp/$RANDOM-$$"
trap '[ -n "$tmp" ] && rm -fr "$tmp"' EXIT
mkdir -m 700 "$tmp" || { echo '!! unable to create a tmpdir' >&2; tmp=; exit 1; }

# alpha?
hasAlpha () {
    identify -format %A "$1" | grep -q "True"
}

# upload $1=pathToimage $2=name
upload () {
    curl --request POST --url https://api.imgur.com/3/image \
    --header "authorization: Client-ID $id" \
    --header 'content-type: multipart/form-data;' \
    -F "image=@$1" -F "name=$2" -F "title=$2" > "$tmp/return.json"

}

# main
while [ $# -gt 0 ]; do

    # var
    image="$1"; url="false"

    # url or file
    if [[ $1 == http* ]] && [[ $1 == *"imgur"* ]] ; then 
        echo "$image Looks like imgur hosted url, downloading to tmp"
        #if wget "$image" -O "$tmp/image"; then
        if curl "$image" --output "$tmp/image"; then
            echo "download ok"
            image="$tmp/image"
            link="$1"
            url="true"
            deletehash="nohash"
        fi
    fi
    
    # check input file
    [[ -f "$image" ]] || exit 1

    # basename
    name="$(basename "$image")"

    if [[ $url == false ]]; then # upload
        echo "Uploading $image"
        upload "$image" "$name"

        # get some bash variables from json, requires jq
        link="$( jq -r '.data | .link' < "$tmp/return.json" )"
        deletehash="$( jq -r '.data | .deletehash' < "$tmp/return.json" )"
    fi
    
    # b=160x160 thumb, l=640x480 medium
    linknoext="${link%.*}"                      # get the filename
    extension="${link##*.}"                     # get the extension
    thumb="${linknoext}b.${extension}"
    medium="${linknoext}l.${extension}"
    
    # Skip on upload error
    echo "$extension"
    if [[ "$extension" == "null" ]]; then
        echo "Upload error"; cat "$tmp/return.json"; echo; echo
        shift; continue
    fi
    
    
    # If image has alpha, lets make custom thumb and medium image
    # filled with checkers
    if hasAlpha "$image"; then
    
        [[ "$extension" == "jpg" ]] && echo "Warning: Image has alpha, but was converted to jpg by host"
        
        echo "image $image has alpha, generating custom thumbs"
        
        # generate and upload medium thumb
        x="640"; y="400"
        convert "$image" -resize ${x}x${y}^ -background none -gravity center -extent ${x}x${y} \( -size ${x}x${y} tile:pattern:checkerboard \) +swap -composite "$tmp/medium.png"
        
        echo "Uploading medium ${x}x${y} transparent thumb"
        upload "$tmp/medium.png" "${name%.*}_md"
        medium="$( jq -r '.data | .link' < "$tmp/return.json" )"
        
        # generate and upload small thumb
        x="160"; y="160"
        convert "$image" -resize ${x}x${y}^ -background none -gravity center -extent ${x}x${y} \( -size ${x}x${y} tile:pattern:checkerboard \) +swap -composite "$tmp/thumb.png"
        
        echo "Uploading ${x}x${y} transparent thumb"
        upload "$tmp/thumb.png" "${name%.*}_th"
        thumb="$( jq -r '.data | .link' < "$tmp/return.json" )"
    fi
    
    # weserv proxy https://images.weserv.nl/docs
    prefix="https://images.weserv.nl/?url="
    link="${prefix}${link}"
    thumb="${prefix}${thumb}"
    medium="${prefix}${medium}"

    # full link in clipboard
    xclip -sel clip <<< "$(printf '%s' "$link")"
    
    # markdown medium and thumb
    echo
    echo "Markdown ${name%.*}"
    echo "[![$name-$deletehash-th]($thumb)]($link)"
    echo "[![$name-$deletehash-md]($medium)]($link)"
    echo
    echo "bbcode ${name%.*}"
    echo "[url=$link#$deletehash][img]${thumb}[/img][/url]"
    echo "[url=$link#$deletehash][img]${medium}[/img][/url]"
    
shift
done
