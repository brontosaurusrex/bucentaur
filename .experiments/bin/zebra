#!/bin/bash

# zebra (display png/jpg images in urxvt/xterm)
# use j and k to move to previous / next, w to set wallpaper, i and m for info.

# example: zebra *.png

# needs: 'w3m-img' (w3mimgdisplay)
# wants: 'nitrogen' as wallpaper setter, imagemagick 'identify' to display info, 'mediainfo' to display info.

n="1"
max="$#"
min="1"

[[ "$#" -eq 0 ]] && exit 1

file=( "$@" ) # parameters to array

zebraview () {
    
    # code from https://blog.z3bra.org/2014/01/images-in-terminal.html
    
    W3MIMGDISPLAY="/usr/lib/w3m/w3mimgdisplay"
    
    # defense by me
    [[ -f "$W3MIMGDISPLAY" ]] || { echo "I need w3mimgdisplay (w3m-img), exiting." >&2; exit 1; }
    
    FILENAME="$1"
    FONTH=14 # 14 Size of one terminal row
    FONTW=8  # 8 Size of one terminal column
    COLUMNS=`tput cols`
    LINES=`tput lines`

    read width height <<< `echo -e "5;$FILENAME" | $W3MIMGDISPLAY`
    
    # defense by me
    if [[ $width == ?(-)+([0-9]) ]] && [[ $height == ?(-)+([0-9]) ]] ; then # is integer
    
        max_width=$(($FONTW * $COLUMNS))
        max_height=$(($FONTH * $(($LINES - 2)))) # substract one line for prompt

        if test $width -gt $max_width; then
        height=$(($height * $max_width / $width))
        width=$max_width
        fi
        if test $height -gt $max_height; then
        width=$(($width * $max_height / $height))
        height=$max_height
        fi

        w3m_command="0;1;0;0;$width;$height;;;;;$FILENAME\n4;\n3;"

        tput cup $(($height/$FONTH)) 0
        echo -e $w3m_command|$W3MIMGDISPLAY
      
    else
        echo
        echo "zebraview error"
        echo
    fi
    
}

setwall () {
    nitrogen --save --set-centered "$1" --set-color="#394A55" --head=0 || echo "nitrogen failed"
}

dostuff () {
    
    clear # screen
    
    m=$(( n - 1 )) # because it starts with 0
    zebraview "${file[$m]}"
    echo -n "($n/$max) " ; echo "${file[$m]}"

}

dostuff # 1st time

readOneKey () {
    
    read -rsn1 key
    
    if  [[ "$key" == "j" ]]; then
        n=$(( n + 1 ))
    elif  [[ "$key" == "k" ]]; then
        n=$(( n - 1 ))
    elif  [[ "$key" == "w" ]]; then
        dostuff "$n" && setwall "${file[$m]}"
        return
    elif  [[ "$key" == "i" ]]; then
        identify "${file[$m]}"
        return
    elif  [[ "$key" == "m" ]]; then
        mediainfo "${file[$m]}"
        return
    elif  [[ "$key" == "q" ]]; then
        exit
    fi
    
    # limit and dostuff
    if (( "$n" > "$max" )); then
        n="$min"
    elif (( "$n" < "$min" )); then
        n="$max"
    fi
        dostuff "$n"
    
}

while true; do readOneKey ; done

