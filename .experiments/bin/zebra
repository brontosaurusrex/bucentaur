#!/bin/bash

# zebra (display png/jpg images in urxvt/xterm)
# use j and k to move to previous / next, w to set wallpaper, i and m for info.

# example: zebra *.png

# needs: 'w3m-img' (w3mimgdisplay)
# wants: 'nitrogen' as wallpaper setter, imagemagick 'identify' to display info, 'mediainfo' to display info.

# if only 'zebra', search for jpg/png
shopt -s extglob
(( $# )) || set -- *.@(jpg|jpeg|png); [[ -e $1 ]] || { echo "No."; stty sane; exit 1; }

n="1"
max="$#"
min="1"

file=("$@") # parameters to array

# help
help () { 
cat << EOF

    zebra *.png
    
    Shortkeys
    j next
    k previous
    i identify (imagemagick)
    m mediainfo
    w set as wall head 0
    e set as wall head 1
    h this help
    q quit

EOF
}
# help 
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    help; exit
fi    

# actual render
zebraview () {
    
    # code from https://blog.z3bra.org/2014/01/images-in-terminal.html
    
    W3MIMGDISPLAY="/usr/lib/w3m/w3mimgdisplay"
    
    # defense by me
    [[ -f "$W3MIMGDISPLAY" ]] || { echo "I need w3mimgdisplay (w3m-img), exiting." >&2; exit 1; }
    
    FILENAME="$1"
    
    FONTH=24 # 14 Size of one terminal row
    FONTW=8  # 8 Size of one terminal column
    # ^
    # Measure a fullblock char in pixels
    
    COLUMNS="$(tput cols)"
    LINES="$(tput lines)"

    read -r width height <<< "$(echo -e "5;$FILENAME" | $W3MIMGDISPLAY)"
    
    # defense by me
    if [[ $width == ?(-)+([0-9]) ]] && [[ $height == ?(-)+([0-9]) ]] ; then # is integer
    
        max_width=$((FONTW * COLUMNS))
        max_height=$((FONTH * ((LINES - 2)))) # substract one line for prompt

        if test "$width" -gt "$max_width"; then
            height=$((height * max_width / width))
            width="$max_width"
        fi
        if test "$height" -gt "$max_height"; then
            width=$((width * max_height / height))
            height="$max_height"
        fi

        w3m_command="0;1;0;0;$width;$height;;;;;$FILENAME\n4;\n3;"

        tput cup $((height/FONTH)) 0
        
        echo -e "$w3m_command"|$W3MIMGDISPLAY
      
    else
        echo
        echo "zebraview error"
        echo
    fi
    
}

# $1 = image, $2 = which head
setwall () {
    
    # user select type
    modes=(--set-centered --set-scaled --set-tiled --set-zoom --set-zoom-fill)
    maxkey="${#modes[@]}"

    for key in ${!modes[*]}
    do
        echo -n "${modes[$key]} ($(( key + 1 ))) "
    done
    echo
    unset key

    read -rsn1 key ; key="$(( key - 1 ))" 
    if ! (( key >= 0 && key <= maxkey )); then
        echo "nope"
        return
    fi

    # action
    nitrogen "$1" --set-color="#394A55" "${modes[$key]}" --head="$2" --save || echo "nitrogen failed"
    restart wbar > /dev/null 2>&1
}

# mkay
dostuff () {
    
    clear # screen
    
    m=$(( n - 1 )) # because it starts with 0
    zebraview "${file[$m]}"
    echo -n "($n/$max) " ; echo "${file[$m]}"

}
dostuff # 1st time

# restart wbar
restart() {
if pgrep -x "$1" > /dev/null
then
    (echo "$1 running, restarting"
    killall -w "$1"
    "${1}" &) &
else
    echo "$1 wasn't running"
fi
}

# user input
readOneKey () {
    
    read -rsn1 key
    
    if  [[ "$key" == "j" ]]; then
        n=$(( n + 1 ))
    elif  [[ "$key" == "k" ]]; then
        n=$(( n - 1 ))
    elif  [[ "$key" == "w" ]]; then
        dostuff "$n" && setwall "${file[$m]}" 0 # head 0
        return
    elif  [[ "$key" == "e" ]]; then
        dostuff "$n" && setwall "${file[$m]}" 1 # head 1
        return
    elif  [[ "$key" == "i" ]]; then
        identify "${file[$m]}"
        return
    elif  [[ "$key" == "m" ]]; then
        mediainfo "${file[$m]}"
        return
    elif  [[ "$key" == "h" ]]; then
        help
        return
    elif  [[ "$key" == "q" ]]; then
        exit
    fi
    
    # limit 
    if (( "$n" > "$max" )); then
        n="$min"
    elif (( "$n" < "$min" )); then
        n="$max"
    fi
    
    # dostuff
    dostuff "$n"
    
}

while true; do readOneKey ; done

