#!/bin/bash

# beepmein

# A little wrapper around linux 'at' command, that will beep you at specific time, see --help.
# On Debian systems make sure 'at' is installed with --no-install-recommends.

# Copyright (C) 2019 brontosaurusrex
# License: GPLv3 or later.

# config
alarmSample="$HOME/.cache/beepmein/stacy.mp3" # change me

# Will kill all children with 'killall beepmein'
trap 'kill $(jobs -p) >/dev/null 2>&1' EXIT

# required
command -v at >/dev/null 2>&1 || { >&2 echo "I need at: sudo apt install --no-install-recommends at" ; exit 1; }
command -v speaker-test >/dev/null 2>&1 || { >&2 echo "I need speaker-test from alsa-utils (for reminder sound)." ; exit 1; }
command -v notify-send >/dev/null 2>&1 || { >&2 echo "I need notify-send." ; exit 1; }
command -v mpv >/dev/null 2>&1 || { >&2 echo "I need mpv (for alarm sounds)." ; exit 1; }

# help
help () { 
cat << EOF

       beepmein now + 3 minutes 
                ^                
                'at' time format
                
       beepmein 22:10
                ^
                also 'at' time format
                
       beepmein 3
                ^                
                in 3 minutes (beepmein shortcut)
                
       beepmein --alarm 8:00 
                  ^
                  Will play audio sample,
                  that you defined by setting alarmSample.
                  Must be first or last parameter.
    
       beepmein --test # test beep and notification
       
       # More testing
       beepmein --reaction reminder_text
       beepmein --reaction --alarm alarm_text
       
       killall beepmein # kill all running playback/beeping
                
       # Notes:
       at -l       # will list pending jobs (or atq)
       at -r <num> # will remove job <num>  (or atrm)

EOF
}

# reminder sound, needs speaker-test (alsa-utils)
beep () {
    [ -z "$1" ] && loops="1" || loops="$1"
    for ((i=1; i<=loops; i++))
    do
        timeout -s HUP 0.1 speaker-test -t sine -f 1000  > /dev/null 2>&1
        sleep 0.1
    done
}

# $1 = how many times to blink, $2 = pause between each blink
blink () {
    # find primary monitor
    monitor=$(xrandr -q | grep "connected" | grep "primary" | cut -f1 -d ' ')
    # find current brightness of primary monitor
    now="$(xrandr --verbose | grep -A 15 "primary" | grep -i brightness | cut -f2 -d ' ')"
    
    [ -z "$1" ] && loops="1" || loops="$1"
    for ((c=1; c<=loops; c++))
    do
        # blink up
        for i in $(seq "$now" 0.1 3.0); do     
            xrandr --output "$monitor" --brightness "$i"
        done
        
        # blink down
        for i in $(seq 3.0 -0.1 "$now"); do     
            xrandr --output "$monitor" --brightness "$i"
        done
    sleep "$2"
    done
}

# reminder sound 2, needs sox
soxchord () {
/usr/bin/play -n synth 2.5 sin 667 gain -5 bend .35,180,.25 .15,740,.53 0,-520,.3
}

# alarm failsafe (by misko), this will be used if 'alarmSample' is not found.
alarmfailsafe () {
for ((i=1; i<=10; i++)); do
      for ((c=1;c<=3;c++)); do
          timeout -s HUP  0.2 speaker-test -t sine -f 3000  > /dev/null 2>&1
          sleep 0.2
       done
       sleep 1
done
}

# test alarm sample path
testAlarmPath () {
    [[ -f "$alarmSample" ]] || { >&2 printf "Note: alarmSample %s not found, \nyou may want to configure the script. \nInternal fail-safe beep will be used instead.\n" "$alarmSample"; }
}

# test audio and notifications
test () {
    echo "notify test"
    notify-send "notify test" || echo "failed"
    echo
    echo "internal beep test used for reminders"
    soxchord || echo "failed"
    echo
    echo "failsafe internal beep test used for reminders"
    beep "3" || echo "failed"
    echo
    echo "mpv sample test used for alarms"
    mpv --no-resume-playback --no-video --length=10 "$alarmSample" || echo "failed"
    echo "failsafe internal beep test used for alarms"
    alarmfailsafe || echo "failed"
    echo
}

# help or test
if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ $# -eq 0 ]; then
    help; exit
elif [ "$1" == "--test" ]; then
    test; exit
fi

# main
if [ "$1" != "--reaction" ] ; then
    if [ "$1" == "--alarm" ] ; then      # if first
        # chop off first argument
        alarm="--alarm" && shift
        testAlarmPath
    elif [ "${!#}" == "--alarm" ] ; then # or last
        # chop off last argument
        alarm="--alarm" && set -- "${@:1:$(($#-1))}"
        testAlarmPath
    fi
    # input
    attime="$*" #concat
    # special case for minutes
    if [[ $attime == ?(-)+([0-9]) ]] ; then # is integer
        attime="now + $attime minutes"
    fi
    read -rp "reason? " reason || reason="$(yad --title="beepmein" --width=300 --separator="" --form --field="reason?")"
    [[ -z "$reason" ]] && reason="beep beep beep"
    echo "beepmein: $attime, reason: $reason"
    # set 'at'
    at "$attime" <<< "$(echo "beepmein --reaction $alarm '${reason}'")" > /dev/null 2>&1 || { beep "2"; exit 1; } # beep two times for error
else
    # reaction
    shift
    if [ "$1" == "--alarm" ]; then
        shift
        notify-send "$1" &
        blink 3 0.8 >/dev/null 2>&1 &
        mpv --no-resume-playback --no-video "$alarmSample" || alarmfailsafe
    else
        notify-send "$1" &
        blink 1 0 >/dev/null 2>&1 &
        soxchord || beep "5"
    fi
fi
