#!/bin/bash

# awsread, txt to speech using cloudy aws polly

# needs aws, mpv, xclip?, md5sum, awk

# usage:
# awsread                       # will read from clipboard
# awsreas /path/to/file.txt     # will read from file

# config
voices=(Amy Brian Joanna Matthew Kendra Joey)
#disabled Ivy Justin Emma Kimberly Salli
#aws polly describe-voices --language-code en-GB ; aws polly describe-voices --language-code en-US
resume="please" # non-empty is true
keepAudio=""    # non-empty is true
# split text at (max:3000)
bytes="600"
# text display width in chars (50-80)
width="50"
# center text block
centertext="" # non-empty is true
# end config

storeInit (){
    # hash based on file path
    hash="$(readlink -f "$input" | md5sum | awk '{print $1}')"
    store="$HOME/tmp/recAWS/${hash}/"
    mkdir -p "$store" || exit
    touch "$store" || exit
}

resumeSave (){
    if [[ "$base" != "clipboard" ]]; then
        echo "$part" > "$store/resume"
        echo "$base" > "$store/name"
        echo "$(readlink -f "$input")" >> "$store/name"
    fi
}

# padding to center
calcPad(){
    if [[ -n $centertext ]]; then
        columns="$(tput cols)"
        pad="$((( columns - width )/2))"
    else
        pad="0"
    fi
}

help () { 
cat << EOF
awsread, txt to speech using cloudy aws polly
needs aws (free validated aws account), mpv, xclip?, md5sum, awk
-----------------------------------------------------------------
usage:
awsread                     # will read from clipboard
awsreas file.txt            # will read from file
awsread --reset file.txt    # or -r will reset resume position for file
awsread --goto 100 file.txt # or -g goto page 100

config:
'resume' is enabled by default and should work for files only, 
not for clipboard.
'keepAudio' is disabled by default, if enabled it will keep
ogg-vorbis audio files in configured directory.
EOF
}

# switches
if [ "$1" == "--reset" ] || [ "$1" == "-r" ]; then # reset resume manually
    resume=""
    shift
elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then # print help
    help
    exit
elif [ "$1" == "--goto" ] || [ "$1" == "-g" ]; then # goto chunk
    shift
    jumpto="$1" # assuming --goto 120 file.txt
    shift
fi
input="$1"

storeInit # gets done in any case

# checks
command -v aws >/dev/null 2>&1 || { echo "I need aws cli, exiting." >&2; exit 1; }
command -v awk >/dev/null 2>&1 || { echo "I need awk, exiting." >&2; exit 1; }
command -v mpv >/dev/null 2>&1 || { echo "I need mpv player, exiting." >&2; exit 1; }
command -v md5sum >/dev/null 2>&1 || { echo "I need md5sum, exiting." >&2; exit 1; }

# tmp dir
tmp="/tmp/$RANDOM-$$"
trap '[ -n "$tmp" ] && rm -fr "$tmp" && resumeSave' EXIT 
mkdir -m 700 "$tmp" || { echo '!! unable to create a tmp dir' >&2; tmp=; exit 1; }

# named pipe
pipe="$tmp/pipe"
if [[ ! -p $pipe ]]; then
    mkfifo $pipe
fi

# play
play (){
    if [[ -n $keepAudio ]]; then
        name="$(($(date +%s%N)/1000000))" # lets name parts by epoch miliseconds
        mpv --no-resume-playback --msg-level=all=no --no-video --record-file="${store}${name}.ogg" "$1"
    else
        mpv --no-resume-playback --msg-level=all=no --no-video "$1"
    fi
}

# read clipboard or file (assuming text)
if [ "$#" -eq  "0" ]
then
    # store clipboard to tmp (assuming text)
    xclip -selection clipboard -o > "$tmp/some.txt" 2>/dev/null || powershell.exe Get-clipboard > "$tmp/some.txt" || exit 1
    base="clipboard" 
else
    # file
    [[ -f "$input" ]] || exit 1
    cp "$input" "$tmp/some.txt"
    # base
    baseext=${input##*/}  # file.ext
    base="${baseext%.*}"  # file
    # resume
    if [[ -n $resume ]]; then
        if [[ -n $jumpto ]]; then # jumpto is set, assuming --goto was used
            echo "Goto $jumpto"
        elif [[ -f "$store/resume" ]]; then
            jumpto="$(cat "$store/resume")"
        else
            jumpto="1"
        fi
        (( jumpto > 1 )) && echo "Resume from part $jumpto"
    fi

fi

# tr remove newlines, sed add newlines where punctuations are, 
# sed remove double spaces, split by some bytes, keep lines
cd "$tmp" || exit
cat "some.txt" | tr '\r\n' ' ' | sed 's/[.!?]  */&\n/g' | sed 's/ \{1,\}/ /g' | split --line-bytes="${bytes}" || exit 1

# count generated files
all="$(find . -type f -name "x*" | wc -l)"

# read
part="0"
for file in x*; do
    ((part=part+1))
    # resume
    if [[ -n $resume ]]; then
        (( part < jumpto )) && continue
    fi
    resumeSave
    calcPad # How much to pad to center block
    echoBlock (){
        echo
        # print header and text part
        (( all > 1 )) && echo "(${part}/${all})" 
        rand="(($RANDOM % ${#voices[@]}))"
        cat "$file" | fmt -w ${width} | sed 's/ \{1,\}/ /g' 
        echo "─── (voice ${voices[$rand]}) ───" 
    }
    echoBlock | pr -T -o "$pad"
    # synth
    aws polly synthesize-speech \
    --output-format ogg_vorbis \
    --voice-id "${voices[$rand]}" \
    --text "$(cat "$file")" "$tmp/pipe" | play "$tmp/pipe" 2>/dev/null || exit
 
    
done